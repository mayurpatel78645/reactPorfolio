import React from 'react';

export default function CodeSnippets() {
  return (
    <>
      <div>
        <meta content="text/html; charset=UTF-8" httpEquiv="content-type" /><style type="text/css" dangerouslySetInnerHTML={{__html: "@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');ul.lst-kix_mx3p3hh01fup-2{list-style-type:none}ul.lst-kix_mx3p3hh01fup-3{list-style-type:none}ul.lst-kix_mx3p3hh01fup-0{list-style-type:none}ul.lst-kix_mx3p3hh01fup-1{list-style-type:none}.lst-kix_mx3p3hh01fup-2>li:before{content:\"\\0025a0  \"}ul.lst-kix_mx3p3hh01fup-6{list-style-type:none}ul.lst-kix_mx3p3hh01fup-7{list-style-type:none}.lst-kix_mx3p3hh01fup-1>li:before{content:\"\\0025cb  \"}ul.lst-kix_mx3p3hh01fup-4{list-style-type:none}ul.lst-kix_mx3p3hh01fup-5{list-style-type:none}.lst-kix_mx3p3hh01fup-0>li:before{content:\"\\0025cf  \"}.lst-kix_mx3p3hh01fup-8>li:before{content:\"\\0025a0  \"}ul.lst-kix_mx3p3hh01fup-8{list-style-type:none}.lst-kix_mx3p3hh01fup-6>li:before{content:\"\\0025cf  \"}.lst-kix_mx3p3hh01fup-5>li:before{content:\"\\0025a0  \"}.lst-kix_mx3p3hh01fup-7>li:before{content:\"\\0025cb  \"}.lst-kix_mx3p3hh01fup-3>li:before{content:\"\\0025cf  \"}.lst-kix_mx3p3hh01fup-4>li:before{content:\"\\0025cb  \"}ol{margin:0;padding:0}table td,table th{padding:0}.c19{-webkit-text-decoration-skip:none;color:#000000;font-weight:400;text-decoration:underline;vertical-align:baseline;text-decoration-skip-ink:none;font-size:26pt;font-family:\"Arial\";font-style:normal}.c12{padding-top:20pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left;height:20pt}.c22{padding-top:0pt;padding-bottom:3pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c3{background-color:#1e1e1e;padding-top:0pt;padding-bottom:0pt;line-height:1.4444444444444444;orphans:2;widows:2;text-align:left}.c20{padding-top:18pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:\"Arial\";font-style:normal}.c5{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left;height:11pt}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:\"Arial\";font-style:normal}.c14{padding-top:20pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c16{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c4{font-size:13.5pt;font-family:\"Consolas\";font-style:italic;color:#569cd6;font-weight:400}.c2{font-size:13.5pt;font-family:\"Consolas\";font-style:italic;color:#c586c0;font-weight:400}.c11{font-size:13.5pt;font-family:\"Consolas\";color:#ce9178;font-weight:400}.c21{color:#000000;font-weight:400;font-size:16pt;font-family:\"Arial\"}.c7{font-size:13.5pt;font-family:\"Consolas\";color:#dcdcaa;font-weight:400}.c6{font-size:13.5pt;font-family:\"Consolas\";color:#4fc1ff;font-weight:400}.c13{font-size:13.5pt;font-family:\"Consolas\";color:#9cdcfe;font-weight:400}.c0{font-size:13.5pt;font-family:\"Consolas\";color:#d4d4d4;font-weight:400}.c17{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c10{text-decoration:none;vertical-align:baseline;font-style:normal}.c8{font-family:\"Courier New\";font-style:italic;font-weight:400}.c15{font-style:italic}.c18{height:11pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:\"Arial\"}p{margin:0;color:#000000;font-size:11pt;font-family:\"Arial\"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}" }} /><p className="c22 title" id="h.qeh1z1svnslx"><span className="c19">Mitt Reads</span></p><h1 className="c14" id="h.3aq6madaopki"><span className="c9">How does it work?</span></h1><p className="c5"><span className="c1" /></p><p className="c16"><span>Mitt Reads is a project made with React that maintains a book library where users will search for books and organize those books onto a shelf of choice. Choices for shelves are</span><span className="c15">&nbsp;currently reading</span><span>, </span><span className="c15">want to read</span><span>, and </span><span className="c15">read</span><span className="c1">. In addition, a user can move readers from one shelf to another if they desire to do so. For example, if a user has finished a book, they can move it from “currently reading” to “read” or add a book they want to read from the search results to the ”want to read” shelf. </span></p><p className="c5"><span className="c1" /></p><p className="c3"><span style={{overflow: 'hidden', display: 'inline-block', margin: '0.00px 0.00px', border: '0.00px solid #000000', transform: 'rotate(0.00rad) translateZ(0px)', WebkitTransform: 'rotate(0.00rad) translateZ(0px)', width: '557.00px', height: '316.00px'}}><img alt="diagram" src="assets/images/image1.png" style={{width: '557.00px', height: '316.00px', marginLeft: '0.00px', marginTop: '0.00px', transform: 'rotate(0.00rad) translateZ(0px)', WebkitTransform: 'rotate(0.00rad) translateZ(0px)'}} title='true' /></span></p><p className="c5"><span className="c1" /></p><h1 className="c14" id="h.ff8d3aqavhvr"><span className="c9">How does the search work?</span></h1><p className="c16"><span>When clicking the </span><span className="c15">add</span><span className="c1">&nbsp;icon on the home page, the user will be taken to a search page to search for books by the title or author. </span></p><h2 className="c20" id="h.wp59vnhrouo5"><span className="c10 c21">But how does it “really” work?</span></h2><p className="c16"><span>The search bar is listening for the event of input from the user. It fetches all the matching books from a file containing all the books’ data, as the user types. In this case, it’s a JSON file. The following is an insight into how the search gets all the data using </span><span>the</span><span className="c15">&nbsp;</span><span className="c8">fetch </span><span className="c15">command</span><span className="c1">:</span></p><p className="c5"><span className="c1" /></p><p className="c3"><span className="c2">&nbsp;export</span><span className="c0">&nbsp;</span><span className="c4">const</span><span className="c0">&nbsp;</span><span className="c7">getSearches</span><span className="c0">&nbsp;= </span><span className="c4">async</span><span className="c0">(</span><span className="c13">searchValue</span><span className="c0">) </span><span className="c4">=&gt;</span><span className="c0 c10">&nbsp;{'{'}</span></p><p className="c3"><span className="c0">&nbsp; </span><span className="c4">const</span><span className="c0">&nbsp;</span><span className="c6">response</span><span className="c0">&nbsp;= </span><span className="c2">await</span><span className="c0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span className="c7">fetch</span><span className="c0">(</span><span className="c11">`</span><span className="c4">${'{'}</span><span className="c6">baseURL</span><span className="c4">{'}'}</span><span className="c11">/books?q=</span><span className="c4">${'{'}</span><span className="c13">searchValue</span><span className="c4">{'}'}</span><span className="c11">`</span><span className="c0 c10">);</span></p><p className="c3"><span className="c0">&nbsp; </span><span className="c4">const</span><span className="c0">&nbsp;</span><span className="c6">data</span><span className="c0">&nbsp;= </span><span className="c2">await</span><span className="c0">&nbsp;</span><span className="c6">response</span><span className="c0">.</span><span className="c7">json</span><span className="c0 c10">();</span></p><p className="c3"><span className="c0">&nbsp; </span><span className="c2">return</span><span className="c0">&nbsp;</span><span className="c6">data</span><span className="c0 c10">;</span></p><p className="c3"><span className="c0 c10">{'}'}</span></p><h1 className="c12" id="h.ceicv1hz3hu0"><span className="c9" /></h1><h1 className="c14" id="h.o58k3ow8jiyv"><span className="c9">Moving books to the desired shelf</span></h1><p className="c16"><span>Once the user has found the desired book, they can move it to the shelf they want. This is a similar process to getting books from the JSON data. Suppose the user wants to move the book to the</span><span className="c15">&nbsp;“want to read”</span><span>&nbsp;section. They can do so by </span><span>selecting the option </span><span className="c1">from the dropdown menu. Under the hood, as the choice is made, the event is passed to a function that grabs the user’s book and puts it on the right shelf. The following is a function that handles the shelf-changing:</span></p><p className="c5"><span className="c1" /></p><p className="c3 c18"><span className="c1" /></p><p className="c3"><span className="c0">&nbsp; </span><span className="c7">effect</span><span className="c0">(() </span><span className="c4">=&gt;</span><span className="c0 c10">&nbsp;{'{'}</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; </span><span className="c4">const</span><span className="c0">&nbsp;</span><span className="c7">generateBooksList</span><span className="c0">&nbsp;= </span><span className="c4">async</span><span className="c0">() </span><span className="c4">=&gt;</span><span className="c0 c10">&nbsp;{'{'}</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; &nbsp; </span><span className="c4">const</span><span className="c0">&nbsp;</span><span className="c6">data</span><span className="c0">&nbsp;= </span><span className="c2">await</span><span className="c0">&nbsp;</span><span className="c13">BooksAPI</span><span className="c0">.</span><span className="c7">getAllData</span><span className="c0 c10">();</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; &nbsp; </span><span className="c7">setBooksList</span><span className="c0">(</span><span className="c6">data</span><span className="c0 c10">);</span></p><p className="c3"><span className="c0 c10">&nbsp; &nbsp; {'}'} &nbsp;</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; </span><span className="c7">generateBooksList</span><span className="c0 c10">();</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; </span><span className="c7">setCurrentlyReading</span><span className="c0">(</span><span className="c6">booksList</span><span className="c0">.</span><span className="c7">filter</span><span className="c0">(</span><span className="c13">item</span><span className="c0">&nbsp;</span><span className="c4">=&gt;</span><span className="c0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span className="c13">item</span><span className="c0">.</span><span className="c13">bookStatus</span><span className="c0">&nbsp;=== </span><span className="c11">'CurrentlyReading'</span><span className="c0 c10">));</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; </span><span className="c7">setWantToRead</span><span className="c0">(</span><span className="c6">booksList</span><span className="c0">.</span><span className="c7">filter</span><span className="c0">(</span><span className="c13">item</span><span className="c0">&nbsp;</span><span className="c4">=&gt;</span><span className="c0">&nbsp;</span><span className="c13">item</span><span className="c0">.</span><span className="c13">bookStatus</span><span className="c0">&nbsp;=== </span><span className="c11">'WantToRead'</span><span className="c0 c10">));</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; </span><span className="c7">setRead</span><span className="c0">(</span><span className="c6">booksList</span><span className="c0">.</span><span className="c7">filter</span><span className="c0">(</span><span className="c13">item</span><span className="c0">&nbsp;</span><span className="c4">=&gt;</span><span className="c0">&nbsp;</span><span className="c13">item</span><span className="c0">.</span><span className="c13">bookStatus</span><span className="c0">&nbsp;=== </span><span className="c11">'Read'</span><span className="c0 c10">));</span></p><p className="c3"><span className="c0">&nbsp; {'}'}, [</span><span className="c6">booksList</span><span className="c0 c10">]);</span></p><p className="c3 c18"><span className="c0 c10" /></p><p className="c3"><span className="c0">&nbsp; </span><span className="c4">const</span><span className="c0">&nbsp;</span><span className="c7">handleUpdateShelf</span><span className="c0">&nbsp;= </span><span className="c4">async</span><span className="c0">(</span><span className="c13">currentShelf</span><span className="c0">, </span><span className="c13">bookId</span><span className="c0">&nbsp;) </span><span className="c4">=&gt;</span><span className="c0 c10">&nbsp;{'{'}</span></p><p className="c3"><span className="c0">&nbsp; &nbsp; </span><span className="c2">await</span><span className="c0">&nbsp;</span><span className="c13">BooksAPI</span><span className="c0">.</span><span className="c7">patchData</span><span className="c0">(</span><span className="c13">currentShelf</span><span className="c0">, </span><span className="c13">bookId</span><span className="c0 c10">); &nbsp; &nbsp;</span></p><p className="c3"><span className="c0 c10">&nbsp; {'}'}</span></p><p className="c5"><span className="c1" /></p><p className="c16"><span className="c1">This code is getting all the books, checking the user’s preference, and then arranging them to their respective shelves.</span></p><p className="c5"><span className="c1" /></p><p className="c16"><span>A similar process is followed to move the books from one shelf to another on the home page. </span></p>
      </div>
    </>
  )
}
